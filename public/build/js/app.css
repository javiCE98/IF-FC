

body{
    background-color: papayawhip;
}

.separacion[data-v-1ef7334d]{
        margin-top: 20%;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/